最近TA遇到麻烦了，他需要进行两个超大整数的算数运算，比如1111111111111111111111111111 + 11111111111111111111111111，由于TA写程序只会用int，于是他声明了两个int类型变量去存上面的数字，但是发现运算出来的结果超级奇怪，还好，TA在小学的时候学过列竖式来计算，他便开心的算起来了，感觉还很良好，但是有一天被老师发现了，他说，你现在带的学生会做，他们学了运算符重载，让他们帮你写个程序吧，于是TA便找你们麻烦了。TA也学过类，于是想让你们用类来做。

定义一个Integer的类用于取代平常所用的int类型，有如下几个要求：
1) 为Integer定义两个构造函数，一个是只有一个int类型的参数的函数，一个是只有string类型的参数的函数
2) 重载算术操作符: +, -, *, /, %, +=, -=, *=, /=, %=, ++, --
3) 重载关系操作符: ==, !=, >, <, >=, <=
4) 重载输出操作符: <<
5) 重载负号

需要注意的是，你编写的类需要支持混合类型表达式，当然，这里只需要支持整型(int)类型的混合模式操作。比如，假设i是Integer类型，需要支持以下两种操作：
i + 2; 
2 + i;
但是，复合赋值操作符的左操作数必须是Integer类型。

以下为一些注意事项：
1) 两个操作数的位数均不超过200，输入的数据全部正确，不需要处理非法输入。输入数据不采用科学计数法（也就是输入进来的就是一串数字，若为负整数，前面有'-'，否则不加任何前缀）
2) 要处理正负情况，但是除法跟取余操作保证两个操作数都为非负数。
3) 假设 q = x / y, r = x % y，规定 x = q * y + r，任何数除以0的结果都为0。
4) 重载的输出操作符完成的功能只是输出该数字（若为负数，则需要输出负号），不需要输出换行符。

如下是我的测试函数：
#include "source.cpp"
#include <iostream>
using namespace std;

int main(int argc, const char *argv[])
{
    int cases = 1;
    cin >> cases;

    string s1, s2;
    while (cases--)
    {
        cin >> s1 >> s2;
        Integer i1(s1);
        Integer i2(s2);

        // 测试构造函数 {
        cout << i1 << endl;
        cout << i2 << endl;
        // }

        // 测试关系操作符 {
        cout << i1 << " == " << i2 << " = " << (i1 == i2) << endl;
        cout << i1 << " != " << i2 << " = " << (i1 != i2) << endl;
        cout << i1 << " <  " << i2 << " = " << (i1 <  i2) << endl;
        cout << i1 << " <= " << i2 << " = " << (i1 <= i2) << endl;
        cout << i1 << " >  " << i2 << " = " << (i1 >  i2) << endl;
        cout << i1 << " >= " << i2 << " = " << (i1 >= i2) << endl;
        // }

        // 测试算术运算符 {
        cout << i1 << " + " << i2 << " = " << (i1 + i2) << endl;
        cout << i1 << " - " << i2 << " = " << (i1 - i2) << endl;
        cout << i1 << " * " << i2 << " = " << (i1 * i2) << endl;
        if (i1 >= 0 && i2 >= 0)
        {
            cout << i1 << " / " << i2 << " = " << (i1 / i2) << endl;
            cout << i1 << " % " << i2 << " = " << (i1 % i2) << endl;
        }
        // }

        // 测试负号 {
        cout << "-" << i1 << " = " << (-i1) << endl;
        // }

        // 测试赋值操作符 {
        Integer tmp = i1;
        i1 += i2;
        cout << tmp << " += " << i2 << " : " << i1 << endl;
        i1 = tmp;

        tmp = i1;
        i1 -= i2;
        cout << tmp << " -= " << i2 << " : " << i1 << endl;
        i1 = tmp;

        tmp = i1;
        i1 *= i2;
        cout << tmp << " *= " << i2 << " : " << i1 << endl;
        i1 = tmp;

        if (i1 >= 0 && i2 >= 0)
        {
            tmp = i1;
            i1 /= i2;
            cout << tmp << " /= " << i2 << " : " << i1 << endl;
            i1 = tmp;

            tmp = i1;
            i1 %= i2;
            cout << tmp << " %= " << i2 << " : " << i1 << endl;
            i1 = tmp;
        }
        // }

        // 测试自增/自减 {
        tmp = i1;
        cout << i1 << "++" << endl;
        i2 = i1++;
        cout << i1 << endl;
        cout << i2 << endl;
        i1 = tmp;

        tmp = i1;
        cout << "++" << i1 << endl;
        i2 = ++i1;
        cout << i1 << endl;
        cout << i2 << endl;
        i1 = tmp;

        tmp = i1;
        cout << i1 << "--" << endl;
        i2 = i1--;
        cout << i1 << endl;
        cout << i2 << endl;
        i1 = tmp;

        tmp = i1;
        cout << "--" << i1 << endl;
        i2 = --i1;
        cout << i1 << endl;
        cout << i2 << endl;

        // }
    }
    //测试混合类型表达式 {
    Integer i1(1111111);
    cout << (i1  + 123) << endl;
    //}

    return 0;
}
